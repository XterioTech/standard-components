"use strict";(self.webpackChunkxterio=self.webpackChunkxterio||[]).push([[8095],{"./node_modules/@aws-sdk/client-sts/dist-es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{getDefaultRoleAssumerWithWebIdentity:()=>defaultRoleAssumers_getDefaultRoleAssumerWithWebIdentity});var dist_es=__webpack_require__("./node_modules/@smithy/middleware-endpoint/dist-es/index.js"),middleware_serde_dist_es=__webpack_require__("./node_modules/@smithy/middleware-serde/dist-es/index.js"),smithy_client_dist_es=__webpack_require__("./node_modules/@smithy/smithy-client/dist-es/index.js"),EndpointParameters=__webpack_require__("./node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js"),models_0=__webpack_require__("./node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js"),Aws_query=__webpack_require__("./node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js");class AssumeRoleWithWebIdentityCommand extends(smithy_client_dist_es.mY.classBuilder().ep({...EndpointParameters.q}).m((function(Command,cs,config,o){return[(0,middleware_serde_dist_es.p2)(config,this.serialize,this.deserialize),(0,dist_es.a3)(config,Command.getEndpointParameterInstructions())]})).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithWebIdentity",{}).n("STSClient","AssumeRoleWithWebIdentityCommand").f(models_0.Cz,models_0.b4).ser(Aws_query.pO).de(Aws_query.l$).build()){}const resolveRegion=async(_region,_parentRegion,credentialProviderLogger)=>{const region="function"==typeof _region?await _region():_region,parentRegion="function"==typeof _parentRegion?await _parentRegion():_parentRegion;return credentialProviderLogger?.debug?.("@aws-sdk/client-sts::resolveRegion","accepting first of:",`${region} (provider)`,`${parentRegion} (parent client)`,"us-east-1 (STS default)"),region??parentRegion??"us-east-1"},getDefaultRoleAssumerWithWebIdentity=(stsOptions,stsClientCtor)=>{let stsClient;return async params=>{if(!stsClient){const{logger=stsOptions?.parentClientConfig?.logger,region,requestHandler=stsOptions?.parentClientConfig?.requestHandler,credentialProviderLogger}=stsOptions,resolvedRegion=await resolveRegion(region,stsOptions?.parentClientConfig?.region,credentialProviderLogger);stsClient=new stsClientCtor({region:resolvedRegion,requestHandler,logger})}const{Credentials}=await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));if(!Credentials||!Credentials.AccessKeyId||!Credentials.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);return{accessKeyId:Credentials.AccessKeyId,secretAccessKey:Credentials.SecretAccessKey,sessionToken:Credentials.SessionToken,expiration:Credentials.Expiration,credentialScope:Credentials.CredentialScope}}};var dist_es_STSClient=__webpack_require__("./node_modules/@aws-sdk/client-sts/dist-es/STSClient.js");const getCustomizableStsClientCtor=(baseCtor,customizations)=>customizations?class CustomizableSTSClient extends baseCtor{constructor(config){super(config);for(const customization of customizations)this.middlewareStack.use(customization)}}:baseCtor,defaultRoleAssumers_getDefaultRoleAssumerWithWebIdentity=(stsOptions={},stsPlugins)=>getDefaultRoleAssumerWithWebIdentity(stsOptions,getCustomizableStsClientCtor(dist_es_STSClient.X,stsPlugins))}}]);