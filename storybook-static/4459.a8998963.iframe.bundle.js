(self.webpackChunkxterio=self.webpackChunkxterio||[]).push([[4459],{"./node_modules/@aws-sdk/credential-providers/dist-es/index.browser.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{fromCognitoIdentity:()=>fromCognitoIdentity_fromCognitoIdentity,fromCognitoIdentityPool:()=>fromCognitoIdentityPool_fromCognitoIdentityPool,fromHttp:()=>fromHttp,fromTemporaryCredentials:()=>fromTemporaryCredentials,fromWebToken:()=>fromWebToken_fromWebToken});class ProviderError extends Error{constructor(message,options=!0){let logger,tryNextLink=!0;"boolean"==typeof options?(logger=void 0,tryNextLink=options):null!=options&&"object"==typeof options&&(logger=options.logger,tryNextLink=options.tryNextLink??!0),super(message),this.name="ProviderError",this.tryNextLink=tryNextLink,Object.setPrototypeOf(this,ProviderError.prototype),logger?.debug?.(`@smithy/property-provider ${tryNextLink?"->":"(!)"} ${message}`)}static from(error,options=!0){return Object.assign(new this(error.message,options),error)}}class CredentialsProviderError extends ProviderError{constructor(message,options=!0){super(message,options),this.name="CredentialsProviderError",Object.setPrototypeOf(this,CredentialsProviderError.prototype)}}function resolveLogins(logins){return Promise.all(Object.keys(logins).reduce(((arr,name)=>{const tokenOrProvider=logins[name];return"string"==typeof tokenOrProvider?arr.push([name,tokenOrProvider]):arr.push(tokenOrProvider().then((token=>[name,token]))),arr}),[])).then((resolvedPairs=>resolvedPairs.reduce(((logins,[key,value])=>(logins[key]=value,logins)),{})))}function fromCognitoIdentity(parameters){return async()=>{parameters.logger?.debug("@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity");const{GetCredentialsForIdentityCommand,CognitoIdentityClient}=await Promise.all([__webpack_require__.e(5389),__webpack_require__.e(540),__webpack_require__.e(3233)]).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/loadCognitoIdentity.js")),{Credentials:{AccessKeyId=throwOnMissingAccessKeyId(parameters.logger),Expiration,SecretKey=throwOnMissingSecretKey(parameters.logger),SessionToken}=throwOnMissingCredentials(parameters.logger)}=await(parameters.client??new CognitoIdentityClient(Object.assign({},parameters.clientConfig??{},{region:parameters.clientConfig?.region??parameters.parentClientConfig?.region}))).send(new GetCredentialsForIdentityCommand({CustomRoleArn:parameters.customRoleArn,IdentityId:parameters.identityId,Logins:parameters.logins?await resolveLogins(parameters.logins):void 0}));return{identityId:parameters.identityId,accessKeyId:AccessKeyId,secretAccessKey:SecretKey,sessionToken:SessionToken,expiration:Expiration}}}function throwOnMissingAccessKeyId(logger){throw new CredentialsProviderError("Response from Amazon Cognito contained no access key ID",{logger})}function throwOnMissingCredentials(logger){throw new CredentialsProviderError("Response from Amazon Cognito contained no credentials",{logger})}function throwOnMissingSecretKey(logger){throw new CredentialsProviderError("Response from Amazon Cognito contained no secret key",{logger})}const fromCognitoIdentity_fromCognitoIdentity=options=>fromCognitoIdentity({...options});class IndexedDbStorage{constructor(dbName="aws:cognito-identity-ids"){this.dbName=dbName}getItem(key){return this.withObjectStore("readonly",(store=>{const req=store.get(key);return new Promise((resolve=>{req.onerror=()=>resolve(null),req.onsuccess=()=>resolve(req.result?req.result.value:null)}))})).catch((()=>null))}removeItem(key){return this.withObjectStore("readwrite",(store=>{const req=store.delete(key);return new Promise(((resolve,reject)=>{req.onerror=()=>reject(req.error),req.onsuccess=()=>resolve()}))}))}setItem(id,value){return this.withObjectStore("readwrite",(store=>{const req=store.put({id,value});return new Promise(((resolve,reject)=>{req.onerror=()=>reject(req.error),req.onsuccess=()=>resolve()}))}))}getDb(){const openDbRequest=self.indexedDB.open(this.dbName,1);return new Promise(((resolve,reject)=>{openDbRequest.onsuccess=()=>{resolve(openDbRequest.result)},openDbRequest.onerror=()=>{reject(openDbRequest.error)},openDbRequest.onblocked=()=>{reject(new Error("Unable to access DB"))},openDbRequest.onupgradeneeded=()=>{const db=openDbRequest.result;db.onerror=()=>{reject(new Error("Failed to create object store"))},db.createObjectStore("IdentityIds",{keyPath:"id"})}}))}withObjectStore(mode,action){return this.getDb().then((db=>{const tx=db.transaction("IdentityIds",mode);return tx.oncomplete=()=>db.close(),new Promise(((resolve,reject)=>{tx.onerror=()=>reject(tx.error),resolve(action(tx.objectStore("IdentityIds")))})).catch((err=>{throw db.close(),err}))}))}}const inMemoryStorage=new class InMemoryStorage{constructor(store={}){this.store=store}getItem(key){return key in this.store?this.store[key]:null}removeItem(key){delete this.store[key]}setItem(key,value){this.store[key]=value}};function localStorage(){return"object"==typeof self&&self.indexedDB?new IndexedDbStorage:"object"==typeof window&&window.localStorage?window.localStorage:inMemoryStorage}function throwOnMissingId(logger){throw new CredentialsProviderError("Response from Amazon Cognito contained no identity ID",{logger})}const fromCognitoIdentityPool_fromCognitoIdentityPool=options=>function fromCognitoIdentityPool({accountId,cache=localStorage(),client,clientConfig,customRoleArn,identityPoolId,logins,userIdentifier=logins&&0!==Object.keys(logins).length?void 0:"ANONYMOUS",logger,parentClientConfig}){logger?.debug("@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity");const cacheKey=userIdentifier?`aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}`:void 0;let provider=async()=>{const{GetIdCommand,CognitoIdentityClient}=await Promise.all([__webpack_require__.e(5389),__webpack_require__.e(540),__webpack_require__.e(3233)]).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/loadCognitoIdentity.js")),_client=client??new CognitoIdentityClient(Object.assign({},clientConfig??{},{region:clientConfig?.region??parentClientConfig?.region}));let identityId=cacheKey&&await cache.getItem(cacheKey);if(!identityId){const{IdentityId=throwOnMissingId(logger)}=await _client.send(new GetIdCommand({AccountId:accountId,IdentityPoolId:identityPoolId,Logins:logins?await resolveLogins(logins):void 0}));identityId=IdentityId,cacheKey&&Promise.resolve(cache.setItem(cacheKey,identityId)).catch((()=>{}))}return provider=fromCognitoIdentity({client:_client,customRoleArn,logins,identityId}),provider()};return()=>provider().catch((async err=>{throw cacheKey&&Promise.resolve(cache.removeItem(cacheKey)).catch((()=>{})),err}))}({...options});var dist_es=__webpack_require__("./node_modules/@smithy/fetch-http-handler/dist-es/index.js");var protocol_http_dist_es=__webpack_require__("./node_modules/@smithy/protocol-http/dist-es/index.js"),smithy_client_dist_es=__webpack_require__("./node_modules/@smithy/smithy-client/dist-es/index.js"),util_stream_dist_es=__webpack_require__("./node_modules/@smithy/util-stream/dist-es/index.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");const fromHttp=(options={})=>{let host;options.logger?.debug("@aws-sdk/credential-provider-http - fromHttp");const full=options.credentialsFullUri;if(!full)throw new CredentialsProviderError("No HTTP credential provider host provided.",{logger:options.logger});host=full;const url=new URL(host);((url,logger)=>{if("https:"!==url.protocol&&"169.254.170.2"!==url.hostname&&"169.254.170.23"!==url.hostname&&"[fd00:ec2::23]"!==url.hostname){if(url.hostname.includes("[")){if("[::1]"===url.hostname||"[0000:0000:0000:0000:0000:0000:0000:0001]"===url.hostname)return}else{if("localhost"===url.hostname)return;const ipComponents=url.hostname.split("."),inRange=component=>{const num=parseInt(component,10);return 0<=num&&num<=255};if("127"===ipComponents[0]&&inRange(ipComponents[1])&&inRange(ipComponents[2])&&inRange(ipComponents[3])&&4===ipComponents.length)return}throw new CredentialsProviderError("URL not accepted. It must either be HTTPS or match one of the following:\n  - loopback CIDR 127.0.0.0/8 or [::1/128]\n  - ECS container host 169.254.170.2\n  - EKS container host 169.254.170.23 or [fd00:ec2::23]",{logger})}})(url,options.logger);const requestHandler=new dist_es.BX;return toRetry=async()=>{const request=function createGetRequest(url){return new protocol_http_dist_es.aW({protocol:url.protocol,hostname:url.hostname,port:Number(url.port),path:url.pathname,query:Array.from(url.searchParams.entries()).reduce(((acc,[k,v])=>(acc[k]=v,acc)),{}),fragment:url.hash})}(url);return options.authorizationToken&&(request.headers.Authorization=options.authorizationToken),async function getCredentials(response,logger){const contentType=response?.headers["content-type"]??response?.headers["Content-Type"]??"";contentType.includes("json")||("NoOpLogger"!==logger?.constructor?.name&&logger?logger.warn:console.warn)("HTTP credential provider response header content-type was not application/json. Observed: "+contentType+".");const stream=(0,util_stream_dist_es.Ou)(response.body),str=await stream.transformToString();if(200===response.statusCode){const parsed=JSON.parse(str);if("string"!=typeof parsed.AccessKeyId||"string"!=typeof parsed.SecretAccessKey||"string"!=typeof parsed.Token||"string"!=typeof parsed.Expiration)throw new CredentialsProviderError("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }",{logger});return{accessKeyId:parsed.AccessKeyId,secretAccessKey:parsed.SecretAccessKey,sessionToken:parsed.Token,expiration:(0,smithy_client_dist_es.uj)(parsed.Expiration)}}if(response.statusCode>=400&&response.statusCode<500){let parsedBody={};try{parsedBody=JSON.parse(str)}catch(e){}throw Object.assign(new CredentialsProviderError(`Server responded with status: ${response.statusCode}`,{logger}),{Code:parsedBody.Code,Message:parsedBody.Message})}throw new CredentialsProviderError(`Server responded with status: ${response.statusCode}`,{logger})}((await requestHandler.handle(request)).response)},maxRetries=options.maxRetries??3,delayMs=options.timeout??1e3,async()=>{for(let i=0;i<maxRetries;++i)try{return await toRetry()}catch(e){await new Promise((resolve=>setTimeout(resolve,delayMs)))}return await toRetry()};var toRetry,maxRetries,delayMs},fromTemporaryCredentials=options=>{let stsClient;return async()=>{options.logger?.debug("@aws-sdk/credential-providers - fromTemporaryCredentials (STS)");const params={...options.params,RoleSessionName:options.params.RoleSessionName??"aws-sdk-js-"+Date.now()};if(params?.SerialNumber){if(!options.mfaCodeProvider)throw new CredentialsProviderError("Temporary credential requires multi-factor authentication, but no MFA code callback was provided.",{tryNextLink:!1,logger:options.logger});params.TokenCode=await options.mfaCodeProvider(params?.SerialNumber)}const{AssumeRoleCommand,STSClient}=await Promise.all([__webpack_require__.e(5389),__webpack_require__.e(2519),__webpack_require__.e(2137)]).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@aws-sdk/credential-providers/dist-es/loadSts.js"));if(stsClient||(stsClient=new STSClient({...options.clientConfig,credentials:options.masterCredentials})),options.clientPlugins)for(const plugin of options.clientPlugins)stsClient.middlewareStack.use(plugin);const{Credentials}=await stsClient.send(new AssumeRoleCommand(params));if(!Credentials||!Credentials.AccessKeyId||!Credentials.SecretAccessKey)throw new CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`,{logger:options.logger});return{accessKeyId:Credentials.AccessKeyId,secretAccessKey:Credentials.SecretAccessKey,sessionToken:Credentials.SessionToken,expiration:Credentials.Expiration,credentialScope:Credentials.CredentialScope}}};__webpack_require__("?4ba7");const fromWebToken_fromWebToken=init=>(init=>async()=>{init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");const{roleArn,roleSessionName,webIdentityToken,providerId,policyArns,policy,durationSeconds}=init;let{roleAssumerWithWebIdentity}=init;if(!roleAssumerWithWebIdentity){const{getDefaultRoleAssumerWithWebIdentity}=await Promise.all([__webpack_require__.e(5389),__webpack_require__.e(2519),__webpack_require__.e(8095)]).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@aws-sdk/client-sts/dist-es/index.js"));roleAssumerWithWebIdentity=getDefaultRoleAssumerWithWebIdentity({...init.clientConfig,credentialProviderLogger:init.logger,parentClientConfig:init.parentClientConfig},init.clientPlugins)}return roleAssumerWithWebIdentity({RoleArn:roleArn,RoleSessionName:roleSessionName??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:webIdentityToken,ProviderId:providerId,PolicyArns:policyArns,Policy:policy,DurationSeconds:durationSeconds})})({...init})},"?4ba7":()=>{}}]);